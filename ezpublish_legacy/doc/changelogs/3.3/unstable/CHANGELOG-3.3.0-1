Changes from 3.2-3 to 3.3.0-1

*Kernel:
- Added function checking main node id from drop down node assignments.
- Added count function for tipafriend and content view.
- Added support for information collection on option datatype.
- Added RSS export support, according to the RSS 1.0 specification: http://web.resource.org/rss/1.0/spec
- Added limited RSS export support for version 2.0, based upon http://blogs.law.harvard.edu/tech/rss
- Added RSS import support (RSS 1.0), for displaying content from other web pages
- Added count function for collected information. This can be used for showing the results of a poll.
- Rewrote parts of the information collection system, it is now possible to configure
  email handling, display handling, redirection and collection separately and according
  to information collection type.
- Added validation and fixup methods for the information collection system to eZDataType.
- Made sure the required field in class defintion is used on information collection submittion
  for attributes that are information collectors.
- Added separate handling of http input and custom actions in ezcontentobject.
- Added fetching object by identifier to content module. Requires attribute data_text to be unique
- Optimized datatype abstraction calls. Resulting in less memory usage and less database calls.
- Extended treemenu operator to support offset and unlimited number of levels. It will also give information about the current selected items.
- Improved the text on the removeobject page and added a choice for whether the object
  should be moved to trash or deleted. Move to trash is the default.
- Improved the text on the removeeditversion page.
- Added support for class filter in treemenu operator.
- Added a $cli initialisation where a function could be called on a non-object in eZScript::initialize()
- Fixed correct link in wordtoimage operator when running in nvh mode.
- Fixed correct link in wordtoimage operator when running in nvh mode.
- Changed default redirect url from current object node to it's parent node when publishing from preview page.
- Added new fetch function object_count_by_user_id which returns the number of objects from a class created by a user.
- Added fetch function best_sell_list in module shop which returns best sellers of product.
- Added fetch function related_purchase in module shop which returns related purchases for a product.
- Fixed wrong include line in ezwordtoimageoperator.php
- Added content_info structure to module result when the view is not cached, previously this was only available
  when the view was cached and restored.
- Removed warnings from eztemplatedesignresource.
- Added latest_list fetch function for classes.
- Added last modified class list to class group list and class list.
- Added support for not having confirmation on draft remove.
- Fixed namespaces for some of the gui template functions.
- New view parameters for content/view, the parameters are day, month and year and can be used by template code.
  The new parameters are alos used with view caching.
- New parameters for subtree listing of content object nodes, you can now specify a field to group by and
  the type of grouping (by day, hour, minute, second and year). You can also specify whether the
  nodes are returned as objects or not. The same parameters are also available with the fetch functions
  content/list and content/tree.
- New navigator called monthview, it will a full month with highlighted and hyperlinked entries, can be
  used for calendars.
- New template operator 'month_overview' which can take a list of items and create a month structure
  which be sent to the monthview.tpl template.
- Added view parameters to content_info block in content/view.php.
- Added optional parameter to content cache functions, it can be used to extend the system
  with additional parameters without changing the function signature.
- Content cache has been extended to take all view parameters into account for the cache key.
  This means that adding new view parameters in view.php will automatically be included for the content cache.
- Improved the content download system with support for images. Also the handleDownload function has been
  split into one that figures out the filename and one that does the actual download.
- Changed the move node operation in content/edit to start from the original node placement.
- Added view for content classes, most of the datatypes has been implemented for this.
- Added correct path for versionview, it uses a similar technique as content edit.
- Added class_attribute_view_gui template function for viewing content class attributes.
- Added content_attributes_data_map to content edit, it is similar to data_map for a contentobject.
- Changed the url_alias attribute of eZContentObjectTreeNode to only return url aliases if
  url translations are enabled (site.ini). This ensures that the urls returned from nodes
  will always work. This also helps with creating urls to nodes/objects, just use the url_alias attribute.
- Updated setup/info page with detection of Turck MMCache. Added name and url for current PHP accelerator.
- Updated setup/info page with more database information, it will list server, database name, retry count
  and the current slave server and database name (if any).
- Made content link in admin use settings for RootNode for top level node link.
- Added module keyword to fetch content list.  For example content/keyword/a will return all objects which 
  have keywords start with 'a'.
- Added fetch function 'same_classattribute_node' to fetch objects which has the same value in one datatype. 
  For example, it is easy to fetch all articles that enable comment is set to true. 

*Templates:
- navigator/google.tpl has changed the arrows to use arrow characters as HTML entities.

*DataType:

eZ integer:
- Fixed unserialization of class data to decode the min/max values correctly even if they contain 0.

eZ float:
- Fixed unserialization of class data to decode the min/max values correctly even if they contain 0.


eZINISetting
- New datatype for editing ini settings.

eZAuthor:
- Modified so it does not add default author if you have removed it manually.

eZObjectRelation
- Checks option in content.ini so you can specify per class attibute where to start browsing.

eZImage
- Redone the image datatype to use the new image system.

*Setup:
- Fixed bug of unable to show checkboxes if available packages less than 4.
- Added test for magic_quotes_runtime setting in php

*Package system:
- Added install type to packages, it will determine if the package can be install or just imported.
- Added information on whether the packages are active or not, only active packages
  will show up in the admin interface.
- Added support for removing packages.
- Added system for creating packages using a wizard, added content class export and site style.
- Added export of packages.
- Finished package upload and added installation of packages.
- Added uninstall of packages.
- Added role support for packages, you can now limit the kind of operations various users can do.

*Bugs:
- http://ez.no/developer/ez_publish_3/bug_reports/logical_operators_do_not_work
  The parser has been fixed to properly recognize numbers when operators are present.

*Templates:
- created templates to override standard browse page when browsing in media folder.
- Added missing link target in embed_image.tpl
- Added templates for generating PDF
- Added advanced dropdown menu under setup to hide the most advanced features.
- Added class specification limit to browse settings.

*Library :

eZ PDF:
- Added basic PDF library. This will be extended in the following weeks.

eZ DB:
- Added attribute support to the database interface, this allows querying
  for server, database name etc.
- The charset setting for database can now be left empty in which case the
  the current internal charset will be used. This makes sure the site
  is in the most sane setting. The site.ini will now be shipped with an
  empty Charset setting.

eZ template:
- Added support for using one variable to hold the iterator values instead of multiple variables.
  This helps with avoiding overuse of namespaces. The new parameter for section is 'var'.
  The holding iterator variable is an object that offers transparent access to the attributes
  of it's current item.
- Added support for accessing the last iteration of a section loop, this only work with
  thew new variable iterator. Can be turned off with the 'no-last-value' parameter.
- Added support for reversing the loop in a section, the parameter is 'reverse'.
- Added fetch_alias function to simplify fetches ex: {let list=fetch_alias(news_list)}
  to fetch 10 last news articles. fetch_alias uses settings in settings/fetchalias.ini 
- Added templates for new design of setup in admin
- Added wash operator for pdf generation ( for escaping linebreaks, tabs and spaces in pdf definition ). Usage : |wash(pdf)
- Added line/column information to the error messages from the template parser.
- New template operator 'maketime' for creating timestamp from hour, minutes, seconds, month, day and year.
- New template operator 'makedate' for creating timestamp from month, day and year.
- New template operator 'gettime' for returning time information on a timestamp.
- New template operator 'roman' for converting numbers into roman numerals
- Fixed get_type template operator to print out prettier text for nulls and booleans.

eZ xml:
- Added the functions removeAttributes and removeChildren in eZDOMNode.
- Added outputhandler to handle PDF output
- Added escaping of attribute values.

eZ image:
- The image system has been rewritten to be more flexible, stable, faster and simpler to use.
  This means a new image manager system, a new image alias system (replacements for variations)
  and a better abstraction for image handlers (classes for converters).
- Added support for image analysis and MIME type overrides. This means that animated GIFs are now possible.
  Currently GIF and EXIF analysis is available, the information from the analysis is also available
  in the templates.

eZ utils:
- The store function in eZHTTPFile can now take a MIME data structure which is used
  for determining the storage place and name for the HTTP file.
- Redone most of the eZMimeType class to properly handle MIME types. It can query about
  MIME type based on url, contents or buffer. Currently only url is implemented fully.
  The system will be able to returned detailed information on the file in a MIME structure.
  The new MIME system is used in conjunction with the new image system.
- Added functions to eZSys to query the PHP version and to figure out if a specific
  version is sufficient with the current version.

eZ soap:
- Added support for arrays and boolean in ezsoapresponse return values

eZ file:
- Added support for hard links and added parameter to linkCopy to determine
  whether symlinks or hardlinks should be used. Also if the sym/hard link fails
  a normal copy is done.

*Translations:
- Several strings has been improved in terms of language use and
  to make them easier to translate.
