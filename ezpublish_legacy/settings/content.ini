#?ini charset="utf-8"?
# eZ Publish configuration file for content module
#
# NOTE: It is not recommended to edit this files directly, instead
#       a file in override should be created for setting the
#       values that is required for your site. Either create
#       a file called settings/override/content.ini.append or
#       settings/override/content.ini.append.php for more security
#       in non-virtualhost modes (the .php file may already be present
#       and can be used for this purpose).

[VersionView]
# OBSOLETE: Use AvailableSiteDesignList instead
# Specify all available site designs
# AvailableSiteDesigns=standard;user;admin;demo
# OBSOLETE: A list of designs the site can use
AvailableSiteDesignList[]
AvailableSiteDesignList[]=admin
#AvailableSiteDesignList[]=base

# Define maximum versions can be managed. Use syntax
# VersionHistoryClass[class_id]=maximum_nr to specify value for particular
# classes. Or if you prefer to use class_identifier (since 4.1.1)
# VersionHistoryClass[class_identifier]=maximum_nr
# Otherwise, the value of DefaultVersionHistoryLimit will be used.
# When decreasing DefaultVersionHistoryLimit or one value in VersionHistoryClass,
# you can execute bin/php/cleanupversions.php to remove the exceeded archived versions.
[VersionManagement]
DefaultVersionHistoryLimit=10
VersionHistoryClass[1]=5
DeleteDrafts=disabled

# Time duration (number of days, hours, minutes and seconds)
# before a draft is considered old and can be removed
DraftsDuration[]
DraftsDuration[days]=90
DraftsDuration[hours]=0
DraftsDuration[minutes]=0
DraftsDuration[seconds]=0
# Clean-up limit per one run of the 'old_drafts_cleanup.php' cronjob script
DraftsCleanUpLimit=100

# Time duration (number of days, hours, minutes and seconds)
# before an internal draft is considered old and can be removed
InternalDraftsDuration[]
InternalDraftsDuration[days]=1
InternalDraftsDuration[hours]=0
InternalDraftsDuration[minutes]=0
InternalDraftsDuration[seconds]=0
# Clean-up limit per one run of the 'internal_drafts_cleanup.php' cronjob script
InternalDraftsCleanUpLimit=100

[EditSettings]
# A list of extensions containing custom content edit handlers.
# These handler must be placed in : <extensions>/<extension-name>/content/<extension-name>handler.php
# And contain a class called : <extension-name>Handler, with the function : fetchInput
# This class must implement eZContentObjectEditHandler ( kernel/classes/ezcontentobjectedithandler.php )
ExtensionDirectories[]
# A list of additional templates to include from content/edit.tpl template
# For instance
# AdditionalTemplates[]=content/edit/autosave.tpl
# will trigger the inclusion of design:content/edit/autosave.tpl
AdditionalTemplates[]

[DataTypeSettings]
# A list of directories to check for datatypes
RepositoryDirectories[]=kernel/classes/datatypes
# A list of extensions which have content object datatypes
# It's common to create a settings/content.ini.append file
# in your extension and add the extension name to automatically
# get datatypes from the extension when it's turned on.
ExtensionDirectories[]

AvailableDataTypes[]=ezstring
AvailableDataTypes[]=eztext
AvailableDataTypes[]=ezxmltext
AvailableDataTypes[]=ezdate
AvailableDataTypes[]=ezdatetime
AvailableDataTypes[]=eztime
AvailableDataTypes[]=ezboolean
AvailableDataTypes[]=ezinteger
AvailableDataTypes[]=ezfloat
AvailableDataTypes[]=ezenum
AvailableDataTypes[]=ezobjectrelation
AvailableDataTypes[]=ezobjectrelationlist
AvailableDataTypes[]=ezimage
AvailableDataTypes[]=ezbinaryfile
AvailableDataTypes[]=ezmedia
AvailableDataTypes[]=ezauthor
AvailableDataTypes[]=ezurl
AvailableDataTypes[]=ezemail
AvailableDataTypes[]=ezoption
AvailableDataTypes[]=ezmultioption
AvailableDataTypes[]=ezmultioption2
AvailableDataTypes[]=ezrangeoption
AvailableDataTypes[]=ezprice
AvailableDataTypes[]=ezmultiprice
AvailableDataTypes[]=ezuser
AvailableDataTypes[]=ezisbn
AvailableDataTypes[]=ezkeyword
AvailableDataTypes[]=ezsubtreesubscription
AvailableDataTypes[]=ezmatrix
AvailableDataTypes[]=ezselection
AvailableDataTypes[]=ezidentifier
AvailableDataTypes[]=ezinisetting
AvailableDataTypes[]=ezpackage
AvailableDataTypes[]=ezproductcategory
AvailableDataTypes[]=ezcountry

# datatypes that hold user accounts
# several actions on user account objects (removing, moving, etc.)
# require clearing of the user policy cache
UserDataTypes[]
UserDataTypes[]=ezuser

[ActionSettings]
ExtensionDirectories[]

[CustomTagSettings]
# You can use custom tags through the <custom> tag in XML fields.
# Example: <custom name="sub">Sub text</custom>
AvailableCustomTags[]
AvailableCustomTags[]=factbox
AvailableCustomTags[]=quote
AvailableCustomTags[]=strike
AvailableCustomTags[]=sub
AvailableCustomTags[]=sup
IsInline[]
IsInline[strike]=true
IsInline[sub]=true
IsInline[sup]=true

[factbox]
# Custom attributes list
CustomAttributes[]
CustomAttributes[]=title

[header]
# UseStrictHeaderRule controls if you can use headers tags
# arbitrarily or only properly nested (header 2 must be inside
# header 1 etc.)
UseStrictHeaderRule=false
# Header classes
AvailableClasses[]
#AvailableClasses[]=headerRed
#AvailableClasses[]=headerBlue
# Custom attributes list
CustomAttributes[]

[paragraph]
AvailableClasses[]
#AvailableClasses[]=pRed
#AvailableClasses[]=pBlue
AllowEmpty=false
CustomAttributes[]

[table]
AvailableClasses[]
#AvailableClasses[]=tableRed
#AvailableClasses[]=tableBlue
CustomAttributes[]

[tr]
AvailableClasses[]
#AvailableClasses[]=trRed
#AvailableClasses[]=trBlue
CustomAttributes[]

[td]
AvailableClasses[]
#AvailableClasses[]=tdRed
#AvailableClasses[]=tdBlue
CustomAttributes[]

[th]
AvailableClasses[]
#AvailableClasses[]=thRed
#AvailableClasses[]=thBlue
CustomAttributes[]

[literal]
AvailableClasses[]
# The class 'html' is disabled by default because it gives editors the
# possibility to insert html and javascript code in XML blocks.
# Don't enable the 'html' class unless you really trust all users who has
# privileges to edit objects containing XML blocks.
#AvailableClasses[]=html
CustomAttributes[]

[strong]
AvailableClasses[]
#AvailableClasses[]=boldRed
#AvailableClasses[]=boldBlue
CustomAttributes[]

[emphasize]
AvailableClasses[]
#AvailableClasses[]=italicRed
#AvailableClasses[]=italicBlue
CustomAttributes[]

[ol]
AvailableClasses[]
#AvailableClasses[]=olRed
#AvailableClasses[]=olBlue
CustomAttributes[]

[ul]
AvailableClasses[]
#AvailableClasses[]=ulRed
#AvailableClasses[]=ulBlue
CustomAttributes[]

[link]
# AvailableViewModes is possible views for the view parameter (used by oe)
AvailableViewModes[]
AvailableClasses[]
#AvailableClasses[]=linkRed
#AvailableClasses[]=linkBlue
CustomAttributes[]

[object]
AvailableClasses[]
#AvailableClasses[]=objectRed
#AvailableClasses[]=objectBlue
CustomAttributes[]

[embed]
AvailableViewModes[]
AvailableClasses[]
#AvailableClasses[]=embedRed
#AvailableClasses[]=embedBlue
CustomAttributes[]

[embed-inline]
AvailableViewModes[]
AvailableClasses[]
#AvailableClasses[]=embedRed
#AvailableClasses[]=embedBlue
CustomAttributes[]

[NodeSettings]
# The node ID of the normal content tree
RootNode=2
# The node ID of the user tree
UserRootNode=5
# The node ID for the media tree
MediaRootNode=43
# The node ID for the setup tree
SetupRootNode=48
# The node ID for the design tree
DesignRootNode=58

[ClassSettings]
# Number of seconds to wait before removing class edit lock.
DraftTimeout=7200

# Controls the presence of the "Apply" button in class edit mode.
ApplyButton=enabled


[ClassAttributeSettings]
# List of attribute categories, by default used for grouping
# attributes in edit interface.
# Key is identifier and value is used in UI as name
# Note: Limit on identifier is 25 charters!
CategoryList[]
CategoryList[content]=Content
CategoryList[meta]=Meta

# Default Category for attributes without or with invalid category
# Note: Must be defined in CategoryList!
DefaultCategory=content


[RelationAssignmentSettings]
# Default assignment for new related objects, possible values are
# - A Node ID - Place all new objects under this node
# - A node path - The placement of the parent node by a path, e.g. media/files
# - root - The root of the tree
# - users - The root of the user tree
# - media - The root of the media tree
# - none - DEPRECATED
#
# Multiple assignments are not allowed.
DefaultAssignment=root
# Automatic assignments for specific classes.
#
# Each line consists of three or two values separated by semi-colon.
# First two values are lists of elements which are comma separated.
#
# First value is the class identifier, second is the assignment (see above for
# values). An optional third is the main node in case you upload to many
# locations. If the third parameter is not set, then the first element of
# the value 2 will be used as main node.
#
# Classes are either specified with identifier, ID or group_ID
# The items are searched in order so the first to match will be used,
# this means that class IDs should come before class group IDs.
#
# If the same class is specified in many lines, then will be used the first
# match where user has an access to all listed nodes.
#
ClassSpecificAssignment[]
ClassSpecificAssignment[]=user,user_group;users/guest_accounts
ClassSpecificAssignment[]=image;media/images
ClassSpecificAssignment[]=video;media/multimedia
ClassSpecificAssignment[]=file;media/files
ClassSpecificAssignment[]=quicktime;media/multimedia
ClassSpecificAssignment[]=windows_media;media/multimedia
ClassSpecificAssignment[]=real_video;media/multimedia
ClassSpecificAssignment[]=flash;media/multimedia
#ClassSpecificAssignment[]=image;33,37;37
#ClassSpecificAssignment[]=match;node1,node2;main_node

[RelationGroupSettings]
# A list of defined relation groups, each entry
# will have a class definition setting suffixed with ClassList
# e.g. a group called images would have the setting ImagesClassList
Groups[]
Groups[]=images
Groups[]=files

# The group were all non-match classes are placed
# this is usually related folders and articles
DefaultGroup=objects

# A list of class identifiers that should be placed in the
# related image group
ImagesClassList[]
ImagesClassList[]=image

# A list of class identifiers that should be placed in the
# related files group
FilesClassList[]
FilesClassList[]=file

[ObjectRelationDataTypeSettings]
ClassAttributeStartNode[]
ClassAttributeStartNode[]=240;AddRelatedImageToDataType

[UnpublishSettings]
RootNodeList[]
ClassList[]

[HideSettings]
# Example:
#
# RootNodeList[]
# RootNodeList[]=2
# HideDateAttributeList[]
# HideDateAttributeList[article]=hide_date
#
# List of root nodes where nodes can be hidden.
RootNodeList[]
# Class attribute map, describing which date/time fields to use.
# The systems uses the class identifier to determine which classes to hide in the cronjob.
HideDateAttributeList[]

[ImageSettings]
DefaultEditAlias=medium
DefaultEmbedAlias=medium


[MatrixComponentSettings]
CompanyAddress[]
CompanyAddress[]=Postal Address
CompanyAddress[]=Visitor Address

PersonContactInfo[]
PersonContactInfo[]=Phone
PersonContactInfo[]=Fax
PersonContactInfo[]=Email
PersonContactInfo[]=Homepage
PersonContactInfo[]=IM address

CompanyContactInfo[]
CompanyContactInfo[]=Phone
CompanyContactInfo[]=Fax
CompanyContactInfo[]=Email
CompanyContactInfo[]=Homepage

[ContentOverrideSettings]
# Set this to true if you would like to do an override
# based on the class group of the content
EnableClassGroupOverride=false

[ClassGroupIDs]
Content=1
Users=2
Media=3
Setup=4

[FetchFunctionSettings]
# Setting used by 'can_instantiate_class_list' fetch function to hide
# certain content classes. Supported are only content class identifiers
# Filtering is only available when 'group_by_class_group' param is used
InstClassListFilter[]

[RemoveSettings]
# Maximum number of nodes to remove using Remove Subtrees feature
MaxNodesRemoveSubtree=100
# delete or trash
DefaultRemoveAction=trash
# true or false
ShowRemoveToTrashCheck=true
# true or false
HideRemoveConfirmation=false

[CopySettings]
# Maximum number of nodes to copy using Copy Subtree feature
MaxNodesCopySubtree=30
# Use either user-defined, last-published or all
VersionHandling=all
# Use either user-defined, keep-unchanged or current to
# set current user as creator of copied contentobjects
CreatorHandling=current
# Use either user-defined, keep-unchanged or current
TimeHandling=current
# Show or not copy subtree notification after copying subtree
ShowCopySubtreeNotification=enabled
# Controls where it will redirect after copying a class
# Use one of:
# grouplist - Redirect to the main classgroup list
# classlist - Redirect to group of the copied class
# classedit - Redirect to edit mode of copied class
# classview - Redirect to view mode of copied class
ClassRedirect=classlist

[RSSImportSettings]
DraftTimeout=7200

[RSSExportSettings]
DraftTimeout=7200

[PDFExportSettings]
DraftTimeout=7200

[ContentVersionDiffSettings]
#When enabled, diff of eZXMLText will occur in the simplified xml input format, with formatting tags.
#When disabled, diff of eZXMLText will occur with just plain text.
UseSimplifiedXML=disabled

[AlphabeticalFilterSettings]
# List of alphabets that will be used in alphabetical navigation.
# Alphabets will be fetched from AlphabetList[<name of alphabet>]
# For example:
#     ContentFilterList[]=<name of alphabet>
# If array is empty means the alphabetical navigation will be disabled.
# Note: This is currently implemented in new admin interface, as it was in the old one,
# as a full refresh of the page. It might be enhanced by Ajax calls in the future.
ContentFilterList[]
#ContentFilterList[]=eng-GB
#ContentFilterList[]=ger-DE

# Alphabet range in unicode (range of english alphabet is between 97 and 122).
# You can use range (e.g. 97-122) and/or sequence of letters (e.g. 248,249).
AlphabetList[]
AlphabetList[eng-GB]=97-122
AlphabetList[ger-DE]=97,228,98-111,246,112-115,223,116,117,252,118-122
AlphabetList[rus-RU]=1072-1103
AlphabetList[nor-NO]=97-122,230,248,229

# If true unused letters in alphabetical navigation (when browsing or fetching subitems)
# will be disabled.
# For example:
# if there are no objects with 'a' first letter in the object name 'a' letter will be disabled in alphabetical navigation.
EnableUnusedLetters=true

[ISBNSettings]
# Will not validate other than registered ISBN13 ranges when this option is set to true.
# When the value is false, values that are outside the ISBN13 ranges, will only check the length and check digit.
StrictValidation=true

[PublishingSettings]
# Enable/Disable the asynchronous publishing feature
AsynchronousPublishing=disabled

# how many parallel publishing operations should be allowed
# default: 10
PublishingProcessSlots=10

# Asynchronous Publishing filters
# Each filter must implement the eZAsynchronousPublishinfFilter abstract class,
# and the class name must be added to this array. Ex:
# AsynchronousPublishingFilters[]=MyAPFilterClass
AsynchronousPublishingFilters[]

# Queue hooks
# You can have your own code executed before an item is added to the publishing queue
# It isn't possible to do so after it is added as there is no way to ensure it isn't already being handled
# Hooks can either be registered dynamically, using PHP code, or pre-defined in INI settings using the following variable
# AsynchronousPublishingQueueHooks[]=MyHookClass::queue
# The hook method must accept two parameters: the content object id, and its version (both integers)
AsynchronousPublishingPreQueueHooks[]

# Post handling hooks
# These hooks will be executed right after an item has been processed by asynchronous publishing
# It can for instance be used to remove custom data added in a Queue hook
# AsynchronousPublishingQueueHooks[]=MyHookClass::postHandle
AsynchronousPublishingPostHandlingHooks[]

# Queue reader handler
# eZ Publish comes with a default queue reader handler, but it can be overridden with a custom one
# To define a new queue reader, override AsynchronousPublishingQueueReader with your class name:
# AsynchronousPublishingQueueReader=myContentPublishingQueue
# The class configured here must declare a method named next()
AsynchronousPublishingQueueReader=ezpContentPublishingQueue

# How frequent the daemon polls the queue (sleep in seconds)
# default: 1
AsynchronousPollingInterval=1

# How frequent the daemon cleans the queue (sleep in seconds)
# default: 43200 (12 hours)
AsynchronousCleanupInterval=43200

# How old processes need to be in order to be cleaned (in seconds)
# default: 604800 (a week)
AsynchronousCleanupAgeLimit=604800

[TestingSettings]
# Enable or disable multivariate testing feature
MultivariateTesting=disabled

# A handler class which implements <ezpMultivariateTestHandlerInterface> interface
MultivariateTestingHandlerClass=ezpMultivariateTestHandler

# List of site accesses multivariate testing is enabled for.
EnabledForSiteAccessList[]
