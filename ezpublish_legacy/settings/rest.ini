#?ini charset="utf-8"?
# eZ Publish configuration file for modules
#
# NOTE: It is not recommended to edit this files directly, instead
#       a file in override should be created for setting the
#       values that is required for your site. Either create
#       a file called settings/override/module.ini.append or
#       settings/override/module.ini.append.php for more security
#       in non-virtualhost modes (the .php file may already be present
#       and can be used for this purpose).

[System]
PrefixFilterClass=ezpRestDefaultRegexpPrefixFilter
ApiPrefix=/api

[ApiProvider]
ProviderClass[]
ProviderClass[auth]=ezpRestAuthProvider

[DebugSettings]
Debug=disabled

[OutputSettings]
RendererClass[xhtml]=ezpContentXHTMLRenderer

[ezpRestContentController_viewContent_OutputSettings]
Template=rest_pagelayout.tpl

[CacheSettings]
# Global switch to enable/disable REST application cache
ApplicationCache=enabled

# Default value if no specific value has been defined for your controller/action
# If enabled, result of each service call will be cached
# You can refine this with setting specific to your controller/action
# The system will look for a [<controllerClass>_<action>_CacheSettings] block to check
# if cache can be used, and if so, which TTL to use
# If this block cannot be found, the system will search at the controller level,
# and so look for a [<controllerClass>_CacheSettings] block.
# See example block below for more information
# Basically this setting allow you to activate the cache to your controllers/actions individually
ApplicationCacheDefault=enabled

# Set default TTL to 10min, in seconds
DefaultCacheTTL=600

# Example for action "viewContent", in "ezpRestContentController" controller class
#[ezpRestContentController_viewContent_CacheSettings]
#ApplicationCache=enabled
#CacheTTL=3600

# Below an example for every actions contained in "ezpRestContentController" controller class
#[ezpRestContentController_CacheSettings]
#ApplicationCache=enabled
#CacheTTL=1200

# Switch to enable/disable Routes cache with APC
RouteApcCache=enabled
# TTL for Route APC cache, in seconds
RouteApcCacheTTL=3600

[Authentication]
RequireAuthentication=enabled
AuthenticationStyle=ezpRestOauthAuthenticationStyle
#AuthenticationStyle=ezpRestBasicAuthStyle
RequireHTTPS=disabled
# Default user to authenticate when authentication is disabled or the route used doesn't need authentication
# If left empty, site.ini/[UserSettings].AnonymousUserID will be used
DefaultUserID=

[OAuthSettings]
# OAuth token/authcode time to live, in seconds
# Default is one hour
TokenTTL=3600

[RouteSettings]
RouteSettingImpl=ezpRestIniRouteFilter
# Pattern for the skip filter
# SkipFilter[]=controller_action;version
# If the version component is not listed version "1" is assumed.
SkipFilter[]
SkipFilter[]=ezpRestErrorController_show
SkipFilter[]=ezpRestAuthController_basicAuth
SkipFilter[]=ezpRestAuthController_oauthRequired
SkipFilter[]=ezpRestOauthTokenController_handleRequest
# Skip (auth) filter for every action in 'myController' which is of API version 2
#SkipFilter[]=myController_*;2

# For future use
# RunFilter[]

[PreRoutingFilters]
# Custom filters implementing ezpRestPreRoutingFilterInterface to be executed,
# before routes are created.
Filters[]

[RequestFilters]
# Custom filters implementing ezpRestRequestFilterInterface, to be executed,
# after the request object has been created.
Filters[]

[ResultFilters]
# Custom filters implementing ezpRestResultFilterInterface, to be executed,
# after the result has been computed.
Filters[]

[ResponseFilters]
# Custom filters implementing ezpRestResponseFilterInterface, to be executed,
# after the view has generated a response.
Filters[]
