#?ini charset="utf-8"?
# eZ Publish configuration file for character transformations
#
# NOTE: It is not recommended to edit this files directly, instead
#       a file in override should be created for setting the
#       values that is required for your site. Either create
#       a file called settings/override/transform.ini.append or
#       settings/override/transform.ini.append.php for more security
#       in non-virtualhost modes (the .php file may already be present
#       and can be used for this purpose).

[Transformation]
# Where to look for transformation files.
# The files all end in .tr
Repository=share/transformations
# The standard transformation files to load
Files[]
Files[]=basic.tr
Files[]=ascii.tr
# Extensions that have transformation files
Extensions[]

# The available transformation groups
# each group can define the rules it uses
Groups[]
Groups[]=search
Groups[]=urlalias_iri
Groups[]=urlalias
Groups[]=urlalias_compat
Groups[]=identifier
Groups[]=uppercase
Groups[]=lowercase

# Maps from a charset to the unicode group
# The group identifier can be used to load certain
# extra transformation files when that charset is used.
# Each entry consists of:
# <charset>;<group>
Charsets[]

# The latin group
Charsets[]=iso-8859-1;latin
Charsets[]=iso-8859-2;latin
Charsets[]=iso-8859-3;latin
Charsets[]=iso-8859-4;latin
Charsets[]=iso-8859-9;latin
Charsets[]=iso-8859-10;latin
Charsets[]=iso-8859-13;latin
Charsets[]=iso-8859-14;latin
Charsets[]=iso-8859-15;latin
Charsets[]=cp437;latin
Charsets[]=cp775;latin
Charsets[]=cp850;latin
Charsets[]=cp852;latin
Charsets[]=cp857;latin
Charsets[]=cp860;latin
Charsets[]=cp861;latin
Charsets[]=cp862;latin
Charsets[]=cp863;latin
Charsets[]=cp865;latin
Charsets[]=cp932;latin
Charsets[]=utf-8;latin
Charsets[]=windows-1250;latin
Charsets[]=windows-1252;latin
Charsets[]=windows-1254;latin
Charsets[]=windows-1257;latin
Charsets[]=windows-1258;latin

# The cyrrilic group
Charsets[]=koi8;cyrillic
Charsets[]=koi8-r;cyrillic
Charsets[]=koi8-u;cyrillic
Charsets[]=iso-8859-5;cyrillic
Charsets[]=cp932;cyrillic
Charsets[]=cp866;cyrillic
Charsets[]=cp855;cyrillic
Charsets[]=windows-1251;cyrillic
Charsets[]=utf-8;cyrillic

# The greek group
Charsets[]=cp437;greek
Charsets[]=cp737;greek
Charsets[]=cp860;greek
Charsets[]=cp861;greek
Charsets[]=cp862;greek
Charsets[]=cp863;greek
Charsets[]=cp864;greek
Charsets[]=cp865;greek
Charsets[]=cp869;greek
Charsets[]=cp932;greek
Charsets[]=iso-8859-7;greek
Charsets[]=macintosh;greek
Charsets[]=windows-1253;greek
Charsets[]=utf-8;greek

# The hebrew group
Charsets[]=cp862;hebrew
Charsets[]=iso-8859-8;hebrew
Charsets[]=windows-1255;hebrew
Charsets[]=utf-8;hebrew

[Extensions]
Commands[]

# Special transformations for latin (latin1, latin extended-a, latin extended-b)
[latin]
# Extra transformation files for latin
Files[]=latin.tr
# Extensions that have transformation files when latin is used
Extensions[]

# Special transformations for cyrillic
[cyrillic]
# Extra transformation files for cyrillic
Files[]=cyrillic.tr
# Extensions that have transformation files when cyrillic is used
Extensions[]

# Special transformations for greek
[greek]
# Extra transformation files for greek
Files[]=greek.tr
# Extensions that have transformation files when greek is used
Extensions[]

# Special transformations for hebrew
[hebrew]
# Extra transformation files for hebrew
Files[]=hebrew.tr
# Extensions that have transformation files when hebrew is used
Extensions[]

# [<group>]
# Rules[]=<command>(<option>[,<option>])
# or
# Rules[]=<command>
#
# Commands:
# normalize
# - Normalizes multiple characters with similar meaning to one type
# - Looks for rule named <parameter>_normalize for each parameter
# - If no parameters are used it will find all normalize rules
#
# search_normalize
# - Runs normalization rules required for search engine
# - Looks for rule named <parameter>_search_normalize for each parameter
# - If no parameters are used it will find all search rules
#
# transform
# - Transforms one type of character into another
# - Looks for rule named <parameter1>_to_<parameter2>
# - If no parameters are used it will find all transformation rules
#
# decompose
# - Turns special characters into strings representing the character
# - Looks for rule named <parameter>_decompose for each parameter
# - If no parameters are used it will find all decompose rules
#
# lowercase
# - Turns characters into their lowercase variant if possible
# - Looks for rule named <parameter>_lowercase for each parameter
# - If no parameters are used it will find all lowercase rules
#
# uppercase
# - Turns characters into their uppercase variant if possible
# - Looks for rule named <parameter>_uppercase for each parameter
# - If no parameters are used it will find all uppercase rules
#
# transliterate
# - Converts from one type of charset to another by finding similar
#   characters or strings
# - Looks for rule named <parameter1>_transliterate_<parameter2>
# - If no parameters are used it will find all transliteration rules
#
# diacritical
# - Removes diacriticals from characters
# - Looks for rule named <parameter>_diacritical for each parameter
# - If no parameters are used it will find all diacritical rules
#
# rule
# - Runs custom transformation rule
# - Looks for rule named <parameter> for each parameter
# - If no parameters are used it will do nothing
#
# Special commands:
# url_cleanup
# - Performs cleanups to make the text presentable in a URL
#
# identifier_cleanup
# - Performs cleanups to make the text usable as an identifier
#
# search_cleanup:
# - Performs cleanup to make the text parsable by the search engine
# - Looks for rule named <parameter>_search_cleanup for each parameter

# Rules used by the search engine, these rules ensures that
# the index or search text is normalized in such way
# to make it easier for the engine to work with it.
[search]
# Extra transformation files for search
Files[]
Files[]=search.tr
# Extensions that have transformation files when search is used
Extensions[]
# The commands to use for search
Commands[]
#Commands[]=transform
Commands[]=decompose
Commands[]=normalize
Commands[]=diacritical
Commands[]=search_normalize
Commands[]=lowercase
Commands[]=transform(inverted,normal)
Commands[]=transform(math,ascii)
Commands[]=search_cleanup

# Rules used by the url alias system (nice urls), the rules
# ensures that the text is transformed to ascii equivalent
# characters. The most important rules are the transliteration
# lowercase and diacritical removal.

# Rule for URLAlias with support for IRI.
# http://www.w3.org/International/O-URL-and-ident.html
#
# This is highly recommended for most modern sites.
#
# Note: Remember to use utf-8 as your characters set for your site and database
[urlalias_iri]
# Extra transformation files for urlalias
Files[]
# Extensions that have transformation files when urlalias is used
Extensions[]
# The commands to use for search
Commands[]
# Perform IRI cleanup only, this means that almost all unicode characters
# are allowed in urls, the exceptions are: space, ampersand and semi-colon.
Commands[]=url_cleanup_iri

# Rule for URLAlias without support for IRI.
# Any unicode character not supported by the URI spec will be
# transformed or removed to produce.
#
# Note: This was the old behaviour in eZ Publish.
[urlalias]
# Extra transformation files for urlalias
Files[]
# Extensions that have transformation files when urlalias is used
Extensions[]
# The commands to use for search
Commands[]
Commands[]=normalize
Commands[]=transform
Commands[]=decompose
Commands[]=transliterate
Commands[]=diacritical
Commands[]=url_cleanup


# Old rules used by the url alias system (nice urls), the rules
# ensures that the text is transformed to ascii equivalent
# characters. The most important rules are the transliteration
# lowercase and diacritical removal.
[urlalias_compat]
# Extra transformation files for urlalias
Files[]
# Extensions that have transformation files when urlalias is used
Extensions[]
# The commands to use for search
Commands[]
Commands[]=normalize
Commands[]=transform
Commands[]=decompose
Commands[]=transliterate
Commands[]=diacritical
# This is the old-style of urls with lowercase only and underscore for separators,
Commands[]=lowercase
Commands[]=url_cleanup_compat

# Rules used by identifiers in eZ Publish in general.
# The rules ensures that the text is transformed to
# ascii equivalent characters.
# The most important rules are the transliteration lowercase and
# diacritical removal.
[identifier]
# Extra transformation files for identifiers
Files[]
# Extensions that have transformation files when identifiers are used
Extensions[]
# The commands to use for identifiers
Commands[]
Commands[]=normalize
Commands[]=transform
Commands[]=decompose
Commands[]=transliterate
Commands[]=diacritical
Commands[]=lowercase
Commands[]=identifier_cleanup

# Rules which makes character into uppercase
# These rules works in similar way to strtoupper in PHP but will
# work regardless of locale used.
[uppercase]
# Extra transformation files for identifiers
Files[]
# Extensions that have transformation files when identifiers are used
Extensions[]
# The commands to use for identifiers
Commands[]
Commands[]=uppercase

# Rules which makes character into lowercase
# These rules works in similar way to strtolower in PHP but will
# work regardless of locale used.
[lowercase]
# Extra transformation files for identifiers
Files[]
# Extensions that have transformation files when identifiers are used
Extensions[]
# The commands to use for identifiers
Commands[]
Commands[]=lowercase
