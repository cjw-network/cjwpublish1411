#?ini charset="utf-8"?
# eZ Publish configuration file for content browsing.
#
# NOTE: It is not recommended to edit this files directly, instead
#       a file in override should be created for setting the
#       values that is required for your site. Either create
#       a file called settings/override/upload.ini.append or
#       settings/override/upload.ini.append.php for more security
#       in non-virtualhost modes (the .php file may already be present
#       and can be used for this purpose).

# Settings for the upload page.
# For start nodes and top level nodes it is possible to use text aliases
# You can use the following aliases:
#  content - Represents the content root node defined NodeSettings/RootNode in content.ini, usually 2
#  users   - Represents the users root node defined NodeSettings/UserRootNode in content.ini, usually 5
# Other aliases are also possible by defining them in AliasList below

[UploadSettings]
DefaultReturnType=NodeID

# A map of node aliases to node ids, here it's possible to define custom alias names
# It maps from the alias name to a node ID
AliasList[]

[LocationSettings]
# A list of class identifiers that should be included in the location dropdown
ClassList[]
ClassList[]=folder

# Which root node to fetch locations from
# Either use a node ID or a node path (e.g. media )
# - content - The content structure
# - users   - The user tree
# - media   - Media tree for images, files and media
RootNode=media

# The maximum number of levels to look for objects
# A depth of 1 means direct descendants
MaxDepth=3
# The maxium number of elements in the drop down
# Setting it too high might slow down the system and make the dropdown hard to use.
# A number between 10 to 30 is OK.
MaxItems=30

[CreateSettings]
# Maps from a mime-type or mime-group to a class identifier
MimeClassMap[]
MimeClassMap[image]=image
MimeClassMap[video/quicktime]=quicktime
MimeClassMap[video/x-msvideo]=windows_media
MimeClassMap[video/vnd.rn-realvideo]=real_video
MimeClassMap[application/vnd.rn-realmedia]=real_video
MimeClassMap[application/x-shockwave-flash]=flash
MimeClassMap[video/mp4]=video

# Maps from MIME-Type to the name of an upload handler
# If the handler is found for the given MIME-Type it will be
# used instead of the normal attribute based upload.
# The syntax is
# MimeUploadHandlerMap[<mime-type>]=<handler_identifier>
# The <handler_identifier> will be used for the class name as well
# as the filename of the PHP file.
# The <mime_type> can either be specified by the full MIME-Type like
# MimeUploadHandlerMap[image/jpeg]
# with just the group
# MimeUploadHandlerMap[image]
# By using just the group the handler can take care of a whole set of mime-types
MimeUploadHandlerMap[]
# Example of OpenOffice.org handling
# MimeUploadHandlerMap[application/vnd.sun.xml.writer]=ezopenofficeupload
# The system will then look for ezopenofficeupload.php

# The class for all files that are not recognized.
# The default is to use the file class
DefaultClass=file

#
# Consists of the class identifier name with _ClassSettings appended
# This example is the for 'image' identifier.
# [image_ClassSettings]
#
# The class attribute identifier which will get the file data
# FileAttribute=image
#
# The class attribute identifier which will get the name,
# the name is calculated using NamePattern
# NameAttribute=name
#
# A pattern that defines the name of the object, it is
# contains text and tags enclosed in < and >.
# Available tags are:
# - original_filename:        The filename of the uploaded file like it was on the locale machine
# - original_filename_base:   Like original_filename but has just the base of the name (i.e no suffix)
# - original_filename_suffix: Like original_filename but has just suffix
# - mime_type:                The detected MIME-Type of the file
# NamePattern=<original_filename_base>

[image_ClassSettings]
FileAttribute=image
NameAttribute=name
NamePattern=<original_filename_base>

[file_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

[quicktime_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

[real_video_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

[windows_media_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

[flash_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

[video_ClassSettings]
FileAttribute=file
NameAttribute=name
NamePattern=<original_filename_base>

# Example of action, the group name is named just what the action is named
# [ExampleAction]
# # The navigation part to use for the page (optional)
# NavigationPartIdentifier=ezcontentnavigationpart
# # The type of the return values, possible values are:
# #   NodeID - Returns the node ids of the selected items
# #   ObjectID - Returns the object ids of the selected items
# ReturnType=NodeID

# # An array with nodes where the object should be placed  (optional)
# # Each entry is either an alias or the node ID.
# # Aliases can be defined in the AliasList variable at the top of this file
# # or one of the system defined aliases can be used.
# # The system defined aliases are:
# # content, users, media, setup
# ParentNodes[]
# ParentNodes[]=media


# Action used when uploading a new file as related object
[RelatedObjectUpload]
ReturnType=ObjectID

[BugFileUpload]
NavigationPartIdentifier=ezsetupnavigationpart
